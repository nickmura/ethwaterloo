import { BigNumber, Contract, providers } from "ethers";
import { Interface } from "ethers/lib/utils";
export declare enum Trigger {
    BLOCK = 0,
    EVENT = 1,
    TIME = 2
}
export declare type ContractCall = {
    target: () => string;
    interface: Interface;
    selector: string;
};
export declare type StateSync = {
    trigger: Trigger;
    triggerValue?: any;
    input: Function;
    call: ContractCall;
    output: Function;
};
export declare class Sync {
    provider: providers.Provider | providers.JsonRpcProvider | providers.WebSocketProvider | providers.Web3Provider;
    multicall: Contract;
    blockHeight: BigNumber;
    blockSyncs: StateSync[];
    timeSyncs: {
        timeout: number;
        syncs: StateSync[];
    }[];
    eventSyncs: {
        event: any;
        syncs: StateSync[];
    }[];
    timeouts: any[];
    constructor(syncs: StateSync[], provider: providers.Provider | providers.JsonRpcProvider | providers.WebSocketProvider | providers.Web3Provider);
    pushUpdate(trigger: Trigger.TIME | Trigger.BLOCK): Promise<void>;
    destroy(): void;
}
